name: secure-ci

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened, ready_for_review ]
  push:
    branches: [ main ]
  workflow_dispatch: {}
  schedule:
    - cron: "0 */12 * * *"   # every 12 hours (UTC)

# Needed for SARIF upload & (optional) GHCR push
permissions:
  contents: read
  security-events: write
  packages: write   # for GHCR push via GITHUB_TOKEN

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/labby-app
  IMAGE_TAG: ${{ github.sha }}
  GHCR_PUSH: "false"   # set to "true" to push the image to GHCR

jobs:
  build_and_scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      # Optional login for GHCR (harmless if GHCR_PUSH == "false")
      - name: Login GHCR
        if: ${{ env.GHCR_PUSH == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare report dir
        run: mkdir -p reports

      # -------- Build the image locally (no AWS/ECR) --------
      - name: Build image (no push)
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:latest
          outputs: type=docker

      # -------- Trivy FS scan (source code) --------
      - name: Trivy FS scan (JSON)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          ignore-unfixed: true
          format: json
          output: reports/trivy-fs.json
          severity: HIGH,CRITICAL

      - name: Trivy FS scan (SARIF for Security tab)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          ignore-unfixed: true
          format: sarif
          output: reports/trivy-fs.sarif
          severity: HIGH,CRITICAL

      - name: Upload Trivy FS SARIF to Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/trivy-fs.sarif

      # -------- Trivy image scan (built image) --------
      - name: Trivy Image scan (JSON)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: json
          output: reports/trivy-image.json
          ignore-unfixed: true
          vuln-type: os,library
          severity: HIGH,CRITICAL

      - name: Trivy Image scan (SARIF)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: sarif
          output: reports/trivy-image.sarif
          ignore-unfixed: true
          vuln-type: os,library
          severity: HIGH,CRITICAL

      - name: Upload Trivy Image SARIF to Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/trivy-image.sarif

      # -------- Checkov (IaC) with SARIF --------
      - name: Checkov scan (SARIF)
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          framework: all
          output_format: sarif
          output_file_path: reports/checkov.sarif
          quiet: true

      - name: Upload Checkov SARIF to Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/checkov.sarif

      # -------- Optional: push image to GHCR (no AWS) --------
      - name: Push to GHCR (optional)
        if: ${{ env.GHCR_PUSH == 'true' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:latest
