name: secure-ci

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened, ready_for_review ]
  push:
    branches: [ main ]
  workflow_dispatch: {}
  schedule:
    - cron: "0 */12 * * *"   # every 12 hours (UTC)

# needed for SARIF upload to the Security tab
permissions:
  contents: read
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ---- IaC scan (Checkov) ---------------------------------------------------
  iac_scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Print trigger info (iac_scan)
        run: |
          TS="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          echo "::group::Trigger context"
          echo "Triggered by: ${{ github.event_name }}"
          echo "Ref:         ${{ github.ref }}"
          echo "SHA:         ${{ github.sha }}"
          echo "Started at:  $TS"
          echo "Run URL:     https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "::endgroup::"

      - name: Checkov (Terraform)
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: iac
          framework: terraform
          quiet: true
          soft_fail: true
          output_format: github_failed_only
      # (Optional) Add a JSON output step later if you want it summarized too.

  # ---- Build, scan, and push container -------------------------------------
  build_and_scan:
    runs-on: ubuntu-latest
    needs: [ iac_scan ]
    permissions:
      id-token: write
      contents: read
      packages: write
      security-events: write

      # security-events is inherited from the top-level

    env:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

    steps:
      - uses: actions/checkout@v4

      - name: Print trigger info (build_and_scan)
        run: |
          TS="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          echo "::group::Trigger context"
          echo "Triggered by: ${{ github.event_name }}"
          echo "Ref:         ${{ github.ref }}"
          echo "SHA:         ${{ github.sha }}"
          echo "Started at:  $TS"
          echo "Run URL:     https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "::endgroup::"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        run: docker build -t ghcr.io/${{ github.repository }}/web:${{ github.sha }} .

      # OIDC (optional): runs only if AWS_ACCOUNT_ID env is non-empty
      - name: Configure AWS creds via OIDC
        if: ${{ env.AWS_ACCOUNT_ID != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GhActions-ReadSecrets
          aws-region: us-east-2

      - name: Get secret (optional)
        if: ${{ env.AWS_ACCOUNT_ID != '' }}
        id: sm
        run: |
          val=$(aws secretsmanager get-secret-value \
                --secret-id secure-ci/api_key \
                --query SecretString --output text || echo '{}')
          echo "api_key=$(echo "$val" | jq -r .api_key)" >> "$GITHUB_OUTPUT"

      - name: Prepare report dir
        run: mkdir -p reports

      # JSON FS scan (for summary + artifacts)
      - name: Trivy FS scan (JSON)
        uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: fs
          format: json
          output: reports/trivy-fs.json
          ignore-unfixed: true
          vuln-type: os,library

      # Optional stricter FS scan (don’t overwrite previous JSON)
      - name: "Trivy FS scan (deps: HIGH/CRITICAL gate)"
        uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: fs
          scan-ref: .
          ignore-unfixed: true
          vuln-type: os,library
          severity: HIGH,CRITICAL
          format: json
          output: reports/trivy-fs-high.json
          exit-code: '1'

      - name: Trivy Image scan (JSON)
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: ghcr.io/${{ github.repository }}/web:${{ github.sha }}
          ignore-unfixed: true
          vuln-type: os,library
          severity: HIGH,CRITICAL
          format: sarif
          output: reports/trivy-image.json
          exit-code: '1'
      - name: Upload Image SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/trivy-image.json

      # --- SARIF for Security tab ---
      - name: Trivy FS scan (SARIF)
        uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: fs
          format: sarif
          output: reports/trivy-fs.sarif
          ignore-unfixed: true
          vuln-type: os,library

      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/trivy-fs.sarif

      # --- Upload artifacts used by the summary job ---
      - name: Upload Trivy FS JSON
        uses: actions/upload-artifact@v4
        with:
          name: trivy-fs.json
          path: reports/trivy-fs.json

      - name: Upload Trivy Image JSON
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image.json
          path: reports/trivy-image.json

      - name: Login GHCR
        if: ${{ success() }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image (tag = commit SHA)
        if: ${{ success() }}
        run: docker push ghcr.io/${{ github.repository }}/web:${{ github.sha }}

      - name: Also tag as 'web'
        if: ${{ success() }}
        run: |
          docker tag ghcr.io/${{ github.repository }}/web:${{ github.sha }} ghcr.io/${{ github.repository }}/web:web
          docker push ghcr.io/${{ github.repository }}/web:web

  # ---- Deploy to staging ----------------------------------------------------
  deploy_staging:
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: [ build_and_scan ]
    environment:
      name: staging
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to STAGING
        run: |
          echo "Deploying commit ${{ github.sha }} to STAGING"
          # your staging deploy script/cli goes here

  # ---- Promote to production ------------------------------------------------
  promote_to_prod:
    needs: [ deploy_staging ]
    environment:
      name: production
    runs-on: ubuntu-latest
    steps:
      - name: Promote to PRODUCTION
        run: |
          echo "Promoting ${{ github.sha }} to PRODUCTION"
          # your prod deploy script/cli goes here

  # ---- Pretty run-page summary ---------------------------------------------
  summary:
    name: Security Summary
    needs: [ iac_scan, build_and_scan ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Download reports
        uses: actions/download-artifact@v4
        with:
          pattern: trivy-*.json
          path: reports
          merge-multiple: true

      - name: Render Summary
        shell: bash
        run: |
          echo "# 🔎 Security Scan Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          # ---- Compact totals across FS + Image ----
          if ls reports/trivy-*.json >/dev/null 2>&1; then
            totals=$(jq -s -r '
              def sev_count:
                [ .Results[]?.Vulnerabilities[]? | .Severity ]
                | reduce .[] as $s ( {"CRITICAL":0,"HIGH":0,"MEDIUM":0,"LOW":0,"UNKNOWN":0}; .[$s]+=1 );
              reduce ( .[]? | try sev_count catch {} ) as $c
                ( {"CRITICAL":0,"HIGH":0,"MEDIUM":0,"LOW":0,"UNKNOWN":0};
                  .CRITICAL += ($c.CRITICAL // 0) |
                  .HIGH     += ($c.HIGH // 0)     |
                  .MEDIUM   += ($c.MEDIUM // 0)   |
                  .LOW      += ($c.LOW // 0)      |
                  .UNKNOWN  += ($c.UNKNOWN // 0)
                )
            ' reports/trivy-fs.json reports/trivy-image.json 2>/dev/null)

            crit=$(echo "$totals" | jq -r '.CRITICAL // 0')
            high=$(echo "$totals" | jq -r '.HIGH // 0')
            med=$(echo "$totals" | jq -r '.MEDIUM // 0')
            low=$(echo "$totals" | jq -r '.LOW // 0')
            unk=$(echo "$totals" | jq -r '.UNKNOWN // 0')

            echo "**Totals:** CRITICAL: $crit • HIGH: $high • MEDIUM: $med • LOW: $low • UNKNOWN: $unk" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          fi

          # ---- Helper to render a per-report table ----
          trivy_table () {
            file="$1"
            if [ ! -f "$file" ]; then
              echo "_No report found at $file_" >> "$GITHUB_STEP_SUMMARY"
              return
            fi
            jq -r '
              [ .Results[]?.Vulnerabilities[]? | .Severity ]
              | reduce .[] as $s ( {"CRITICAL":0,"HIGH":0,"MEDIUM":0,"LOW":0,"UNKNOWN":0}; .[$s]+=1 )
              | "| CRITICAL | HIGH | MEDIUM | LOW | UNKNOWN |\n| --: | --: | --: | --: | --: |\n| \(.CRITICAL) | \(.HIGH) | \(.MEDIUM) | \(.LOW) | \(.UNKNOWN) |"
            ' "$file" >> "$GITHUB_STEP_SUMMARY"
          }

          # ---- Trivy FS ----
          if [ -f reports/trivy-fs.json ]; then
            echo "## 📦 Trivy (Filesystem / deps)" >> "$GITHUB_STEP_SUMMARY"
            trivy_table "reports/trivy-fs.json"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          fi

          # ---- Trivy Image ----
          if [ -f reports/trivy-image.json ]; then
            echo "## 🐳 Trivy (Container Image)" >> "$GITHUB_STEP_SUMMARY"
            trivy_table "reports/trivy-image.json"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          fi

          echo "> _Artifacts with full JSON are attached to this run for deep dive._" >> "$GITHUB_STEP_SUMMARY"
