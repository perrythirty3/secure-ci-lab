name: secure-ci

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened, ready_for_review ]
  push:
    branches: [ main ]
  workflow_dispatch: {}
  schedule:
    - cron: "0 */12 * * *"   # every 12 hours (UTC)

# needed for SARIF upload to the Security tab
permissions:
  contents: read
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ---- IaC scan (Checkov) ---------------------------------------------------
  iac_scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Print trigger info (iac_scan)
        run: |
          TS="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          echo "::group::Trigger context"
          echo "Triggered by: ${{ github.event_name }}"
          echo "Ref:         ${{ github.ref }}"
          echo "SHA:         ${{ github.sha }}"
          echo "Started at:  $TS"
          echo "Run URL:     https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "::endgroup::"

      - name: Checkov (Terraform)
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: iac
          framework: terraform
          quiet: true
          soft_fail: true
          output_format: github_failed_only
      # (Optional) Add a JSON output step later if you want it summarized too.

  # ---- SonarCloud (PR Quality Gate) ----------------------------------------
  sonarcloud:
    runs-on: ubuntu-latest
    needs: [ iac_scan ]
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN:  ${{ secrets.SONAR_TOKEN }}

  # ---- Build, scan, and push container -------------------------------------
  build_and_scan:
    runs-on: ubuntu-latest
    needs: [ iac_scan, sonarcloud ]
    permissions:
      id-token: write
      contents: read
      packages: write
      security-events: write   # needed for SARIF uploads

    env:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

    steps:
      - uses: actions/checkout@v4

      - name: Print trigger info (build_and_scan)
        run: |
          TS="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          echo "::group::Trigger context"
          echo "Triggered by: ${{ github.event_name }}"
          echo "Ref:         ${{ github.ref }}"
          echo "SHA:         ${{ github.sha }}"
          echo "Started at:  $TS"
          echo "Run URL:     https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "::endgroup::"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        run: docker build -t ghcr.io/${{ github.repository }}/web:${{ github.sha }} .

      # OIDC (optional): runs only if AWS_ACCOUNT_ID env is non-empty
      - name: Configure AWS creds via OIDC
        if: ${{ env.AWS_ACCOUNT_ID != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GhActions-ReadSecrets
          aws-region: us-east-2

      - name: Get secret (optional)
        if: ${{ env.AWS_ACCOUNT_ID != '' }}
        id: sm
        run: |
          val=$(aws secretsmanager get-secret-value \
                --secret-id secure-ci/api_key \
                --query SecretString --output text || echo '{}')
          echo "api_key=$(echo "$val" | jq -r .api_key)" >> "$GITHUB_OUTPUT"

      - name: Prepare report dir
        run: mkdir -p reports

      # JSON FS scan (for summary + artifacts)
      - name: Trivy FS scan (JSON)
        uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: fs
          format: json
          output: reports/trivy-fs.json
          ignore-unfixed: true
          vuln-type: os,library

      # Optional stricter FS scan (donâ€™t overwrite previous JSON)
      - name: "Trivy FS scan (deps: HIGH/CRITICAL gate)"
        uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: fs
          scan-ref: .
          ignore-unfixed: true
          vuln-type: os,library
          severity: HIGH,CRITICAL
          format: json
          output: reports/trivy-fs-high.json
          exit-code: '1'

      - name: Trivy Image scan (JSON)
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: ghcr.io/${{ github.repository }}/web:${{ github.sha }}
          ignore-unfixed: true
          vuln-type: os,library
          severity: HIGH,CRITICAL
          format: json
          output: reports/trivy-image.json
          exit-code: '1'

      - name: Trivy Image scan (SARIF)
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: ghcr.io/${{ github.repository }}/web:${{ github.sha }}
          format: sarif
          output: reports/trivy-image.sarif
          ignore-unfixed: true
          vuln-type: os,library
          severity: HIGH,CRITICAL

      - name: Upload Image SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/trivy-image.sarif
          category: trivy-image

      # --- SARIF for Security tab (filesystem) ---
      - name: Trivy FS scan (SARIF)
        uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: fs
          format: sarif
          output: reports/trivy-fs.sarif
          ignore-unfixed: true
          vuln-type: os,library

      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/trivy-fs.sarif
          category: trivy-fs

      # --- Upload artifacts used by the summary job ---
      - name: Upload Trivy FS JSON
        uses: actions/upload-artifact@v4
        with:
          name: trivy-fs.json
          path: reports/trivy-fs.json
          retention-days: 7

      - name: Upload Trivy Image JSON
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image.json
          path: reports/trivy-image.json
          retention-days: 7

      - name: Login GHCR
        if: ${{ success() }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image (tag = commit SHA)
        if: ${{ success() }}
        run: docker push ghcr.io/${{ github.repository }}/web:${{ github.sha }}

      - name: Also tag as 'web'
        if: ${{ success() }}
        run: |
          docker tag ghcr.io/${{ github.repository }}/web:${{ github.sha }} ghcr.io/${{ github.repository }}/web:web
          docker push ghcr.io/${{ github.repository }}/web:web

  # ---- Deploy to staging ----------------------------------------------------
  deploy_staging:
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: [ build_and_scan ]
    environment:
      name: staging
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to STAGING
        run: |
          echo "Deploying commit ${{ github.sha }} to STAGING"
          # your staging deploy script/cli goes here

  # ---- Promote to production ------------------------------------------------
  promote_to_prod:
    needs: [ deploy_staging ]
    environment:
      name: production
    runs-on: ubuntu-latest
    steps:
      - name: Promote to PRODUCTION
        run: |
          echo "Promoting ${{ github.sha }} to PRODUCTION"
          # your prod deploy script/cli goes here

